# -*- coding: utf-8 -*-
"""07_19101050_Sabiha Afrin_Lab06.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aVUaRp5geN8CnlVdq5ah_paXV4jXiEMr
"""

import pandas as pd
import numpy as np
import sklearn

medical = pd.read_csv('/content/sample_data/Melanoma TFRecords 256x256 (1).csv')
medical.head(33127)

medical.isnull().sum()

from sklearn.impute import SimpleImputer
impute = SimpleImputer(missing_values=np.nan, strategy='mean')
impute.fit(medical[['age_approx']])
medical['age_approx'] = impute.transform(medical[['age_approx']])

medical.isnull().sum()

from sklearn.preprocessing import LabelEncoder
enc = LabelEncoder()
medical['image_name']  = enc.fit_transform(medical['image_name'])
medical['patient_id'] = enc.fit_transform(medical['patient_id'])
medical['sex'] = enc.fit_transform(medical['sex'])
medical['anatom_site_general_challenge'] = enc.fit_transform(medical['anatom_site_general_challenge'])
medical['diagnosis'] = enc.fit_transform(medical['diagnosis'])
medical['benign_malignant'] = enc.fit_transform(medical['benign_malignant'])
medical.info()

from sklearn.impute import SimpleImputer
impute = SimpleImputer(missing_values=np.nan, strategy='mean')
impute.fit(medical[['sex']])
medical['sex'] = impute.transform(medical[['sex']])

from sklearn.impute import SimpleImputer
impute = SimpleImputer(missing_values=np.nan, strategy='mean')
impute.fit(medical[['anatom_site_general_challenge']])
medical['anatom_site_general_challenge'] = impute.transform(medical[['anatom_site_general_challenge']])

medical.isnull().sum()

medical.info()

from sklearn.preprocessing import LabelEncoder

enc = LabelEncoder()
medical['image_name_enc'] = enc.fit_transform(medical['image_name'])
print(medical[['image_name', 'image_name_enc']].head(20))

medical.head()

enc = LabelEncoder()
medical['patient_id_enc'] = enc.fit_transform(medical['patient_id'])
print(medical[['patient_id', 'patient_id_enc']].head(20))

enc = LabelEncoder()
medical['sex_enc'] = enc.fit_transform(medical['sex'])
print(medical[['sex', 'sex_enc']].head(20))

enc = LabelEncoder()
medical['anatom_site_general_challenge_enc'] = enc.fit_transform(medical['anatom_site_general_challenge'])
print(medical[['anatom_site_general_challenge', 'anatom_site_general_challenge_enc']].head(20))

enc = LabelEncoder()
medical['diagnosis_enc'] = enc.fit_transform(medical['diagnosis'])
print(medical[['diagnosis', 'diagnosis_enc']].head(20))

enc = LabelEncoder()
medical['benign_malignant_enc'] = enc.fit_transform(medical['benign_malignant'])
print(medical[['benign_malignant', 'benign_malignant_enc']].head(20))

medical.head()

medical=medical.drop(['image_name','patient_id','sex','anatom_site_general_challenge','diagnosis','target','benign_malignant'],axis=1)

medical.head()

medical.shape

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
med=pd.DataFrame(scaler.fit_transform(medical),columns=medical.columns)

print("feature minimum before scaling:\n {}".format(medical.min(axis=1)))
print("feature maximum before scaling:\n {}".format(medical.max(axis=1)))

print("feature minimum after scaling:\n {}".format(med.min(axis=1)))
print("feature maximum after scaling:\n {}".format(med.max(axis=1)))

med.head(33100)

from sklearn.model_selection import train_test_split

x = medical[["age_approx","tfrecord","width","height","patient_code"]]
y = medical['diagnosis_enc']
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state = 42)

scaler.fit(x_train)

#Split the data into 80% training and 20% testing
x_train, x_test, y_train, y_test = train_test_split(x, y,test_size=0.2, random_state=42)
print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

# Import the dependencies for logistic regression
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

#Train the model
model = LogisticRegression()
model.fit(x_train, y_train) #Training the model
predictions = model.predict(x_test)
print(predictions)# printing predictions

#logistic regression
logistic_accuracy=accuracy_score(y_test, predictions)
print( logistic_accuracy)

#Decision tree
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
X = medical.iloc[:,-1] 
y = medical.iloc[:, 1]
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)
clf = DecisionTreeClassifier(criterion='entropy',random_state=1)
clf.fit(x_train,y_train)
y_pred = clf.predict(x_test)
dt_acc=accuracy_score(y_pred,y_test)
print(dt_acc)

fig =plt.figure()
ax=fig.add_axes([0,0,0.5,1.0])
approach = ['Logistic Regression', 'Decision Tree']
percentage = [logistic_accuracy, dt_acc]
ax.bar(approach,percentage)
ax.set_title('Accuracy bar')
plt.ylabel('Accuracy Percentage')

print("Accuracy using logistic regression :", logistic_accuracy)
print("Accuracy using decision tree :", dt_acc )
print("Comparison is shown in the graph below :")