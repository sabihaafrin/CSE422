# -*- coding: utf-8 -*-
"""7_19101050_Lab07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P9b4btJhE-yhr4TT93e_5W0tB3R3bBNK
"""

import pandas
import numpy
import matplotlib.pyplot as plot
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
from sklearn.decomposition import PCA

medical = pandas.read_csv('/content/sample_data/Melanoma TFRecords 256x256.csv')
print(medical.isnull().sum())

imp = SimpleImputer(missing_values=numpy.nan, strategy='mean')
imp.fit(medical[['age_approx']])
medical['age_approx'] = imp.transform(medical[['age_approx']])

def impute_categorical_nan(data, column):
    category = data[column].mode()[0]
    data[column].fillna(category, inplace=True)


for columns in ['sex', 'anatom_site_general_challenge']:
    impute_categorical_nan(medical, columns)

encode = LabelEncoder()
medical['diagnosis'] = encode.fit_transform(medical['diagnosis'])
medical['anatom_site_general_challenge'] = encode.fit_transform(medical['anatom_site_general_challenge'])
medical['benign_malignant'] = medical['benign_malignant'].map({'benign': 0, 'malignant': 1})
medical['sex'] = medical['sex'].map({'male': 0, 'female': 1})

items = ["image_name", "patient_id", "patient_code"]
medical = medical.drop(items, axis=1)

x = medical.loc[:, medical.columns != 'target']
y = medical['target']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0, stratify=y)

def accuracy(confusion_matrix):
    diagonal_sum = confusion_matrix.trace()
    elements_sum = confusion_matrix.sum()
    return diagonal_sum/elements_sum

medical.info()

# SVM Classifier
svm_class = SVC(kernel="linear")
svm_class.fit(x_train, y_train)

y_pred1 = svm_class.predict(x_test)

# print accuracy
class1 = confusion_matrix(y_pred1, y_test)
acc1 = accuracy(class1)
print("Accuracy of pre-PCA for SVM for the given dataset:", acc1)

# Neural-Network Classifier
nn_class = MLPClassifier(hidden_layer_sizes=(7), activation="relu", max_iter=10000, solver="adam", random_state=1)
nn_class.fit(x_train, y_train)

y_pred2 = nn_class.predict(x_test)

# print accuracy
class2 = confusion_matrix(y_pred2, y_test)
acc2 = accuracy(class2)
print("Accuracy of pre-PCA for MLPClassifier for the given dataset:", acc2)

# Random Forest Classifier
rf_class = RandomForestClassifier(n_estimators=100)
rf_class.fit(x_train, y_train)

y_pred3 = rf_class.predict(x_test)

# print accuracy
class3 = confusion_matrix(y_pred3, y_test)
acc3 = accuracy(class3)
print("Accuracy of Classifier pre-PCA for Random Forest for the given dataset:", acc3)

# Dimensionality Reduction-pca
features = ['sex', 'age_approx', 'anatom_site_general_challenge', 'diagnosis', 'benign_malignant', 'tfrecord', 'width', 'height']
k = medical.loc[:, features].values
l = medical.loc[:, ['target']].values
m = StandardScaler().fit_transform(m)
pca_list = PCA(n_components=4)
components = pca_list.fit_transform(m)
df = pandas.DataFrame(data=components, columns=['column1', 'column2', 'column3', 'column4'])
final_dataset = pandas.concat([df, medical[['target']]], axis=1)

# Training and Testing dataset
x1 = final_dataset.loc[:, final_dataset.columns != 'target']
y1 = final_dataset['target']
x_train1, x_test1, y_train1, y_test1 = train_test_split(x1, y1, test_size=0.2, random_state=0, stratify=y1)

# SVM Classifier
svm_classifier = SVC(kernel="linear")
svm_classifier.fit(x_train1, y_train1)

y_pred4 = svm_classifier.predict(x_test1)

# print accuracy
class4 = confusion_matrix(y_pred4, y_test1)
acc2 = accuracy(class4)
print("Accuracy of post-PCA for SVM for the given dataset:", acc2)

# Neural-Network Classifier
nn_classifier = MLPClassifier(hidden_layer_sizes=(7), activation="relu", max_iter=10000, solver="adam", random_state=1)
nn_classifier.fit(x_train1, y_train1)

y_pred5 = nn_classifier.predict(x_test1)

# print accuracy
class5 = confusion_matrix(y_pred5, y_test1)
acc4 = accuracy(class5)
print("Accuracy of post-PCA for MLPClassifier for the given dataset:", acc4)

# Random Forest Classifier
rf_classifier = RandomForestClassifier(n_estimators=100)
rf_classifier.fit(x_train1, y_train1)

y_pred6 = rf_classifier.predict(x_test1)

# print accuracy
class5 = confusion_matrix(y_pred6, y_test1)
acc6 = accuracy(class5)
print("Accuracy of post-PCA Random Forest Classifier for the given dataset:", acc6)

# plotting the results
barWidth = 0.15
fig = plot.subplots(figsize=(12, 8))
pre = [acc1, acc2, acc3]
post = [acc2, acc4, acc6]

bar1 = numpy.arange(len(pre))
bar2 = [p + barWidth for p in bar1]

plot.bar(bar1, pre, color='black', width=barWidth, label='Pre_PCA')
plot.bar(bar2, post, color='blue', width=barWidth, label='Post_PCA')

plot.ylabel('Accuracy percentage')
plot.xticks([r+0.12 for r in range(len(pre))], ['Support Vector Machine', 'MLPClassifier', 'Random Forest'])

plot.legend()
plot.show()